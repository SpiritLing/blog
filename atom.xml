<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SpiritLing</title>
  
  <subtitle>踮起脚尖就更接近阳光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.spiritling.cn/"/>
  <updated>2020-05-11T10:10:31.081Z</updated>
  <id>https://blog.spiritling.cn/</id>
  
  <author>
    <name>SpiritLing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.Net Core + EF + mysql 从数据库生成实体</title>
    <link href="https://blog.spiritling.cn/posts/daefc0a4/"/>
    <id>https://blog.spiritling.cn/posts/daefc0a4/</id>
    <published>2020-02-26T12:48:25.000Z</published>
    <updated>2020-05-11T10:10:31.081Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>.Net Core + EF + mysql 从数据库生成实体</p></blockquote><a id="more"></a><p>原文地址：<a href="https://www.cnblogs.com/yangjinwang/p/9516988.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/yangjinwang/p/9516988.html</a></p><h2 id="安装NuGet包"><a href="#安装NuGet包" class="headerlink" title="安装NuGet包"></a>安装NuGet包</h2><p>点击 <code>工具</code> -&gt; <code>NuGet包管理器</code> -&gt; <code>程序包管理器控制台</code></p><p>分别安装以下几个包</p><p>Mysql 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Install-Package MySql.Data.EntityFrameworkCore -Pre</span><br><span class="line">Install-Package Pomelo.EntityFrameworkCore.MySql</span><br><span class="line">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class="line">Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design</span><br></pre></td></tr></table></figure><p>Sql server 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Microsoft.EntityFrameworkCore</span><br><span class="line">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class="line">Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design</span><br></pre></td></tr></table></figure><h2 id="运行命令生成实体"><a href="#运行命令生成实体" class="headerlink" title="运行命令生成实体"></a>运行命令生成实体</h2><p>Mysql 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scaffold-DbContext &quot;server=.;userid=tech5_kj;pwd=xxx;port=3306;database=tech5_kj;sslmode=none;&quot; Pomelo.EntityFrameworkCore.MySql -OutputDir Models -Force</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Scaffold-DbContext &quot;server=.;userid=tech5_kj;pwd=xxx;port=3306;database=tech5_kj;sslmode=none;&quot; Pomelo.EntityFrameworkCore.MySql -OutputDir Models -UseDatabaseNames -Force</span><br></pre></td></tr></table></figure><p>Sql server版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scaffold-DbContext &quot;Data Source=.;Initial Catalog=EFCore_dbfirst;User ID=sa;Password=sa.123&quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-OutputDir *** 实体文件所存放的文件目录</span><br><span class="line">-ContextDir *** DbContext文件存放的目录</span><br><span class="line">-Context *** DbContext文件名</span><br><span class="line">-Schemas *** 需要生成实体数据的数据表所在的模式</span><br><span class="line">-Tables *** 需要生成实体数据的数据表的集合</span><br><span class="line">-DataAnnotations</span><br><span class="line">-UseDatabaseNames 直接使用数据库中的表名和列名（某些版本不支持）</span><br><span class="line">-Force 强制执行，重写已经存在的实体文件</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;.Net Core + EF + mysql 从数据库生成实体&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://blog.spiritling.cn/categories/dotnet/"/>
    
    
      <category term="dotNet" scheme="https://blog.spiritling.cn/tags/dotNet/"/>
    
      <category term="EF" scheme="https://blog.spiritling.cn/tags/EF/"/>
    
      <category term="mysql" scheme="https://blog.spiritling.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>React 使用 Proxy 代理（create-react-app）</title>
    <link href="https://blog.spiritling.cn/posts/74e1ae39/"/>
    <id>https://blog.spiritling.cn/posts/74e1ae39/</id>
    <published>2020-02-19T02:21:16.000Z</published>
    <updated>2020-05-11T10:10:31.081Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>React 使用 Proxy 代理（create-react-app）</p></blockquote><a id="more"></a><h2 id="在create-react-app-中配置proxy代理"><a href="#在create-react-app-中配置proxy代理" class="headerlink" title="在create-react-app 中配置proxy代理"></a>在create-react-app 中配置proxy代理</h2><p>proxy，默认为NULL，类型为URL，一个为了发送http请求的代理<br>在平时开发时，尤其前后端分离时，需要假数据来进行模拟请求，这个时候就需要<code>proxy</code>代理来处理</p><h3 id="create-react-app-lt-2-0"><a href="#create-react-app-lt-2-0" class="headerlink" title="create-react-app &lt; 2.0"></a>create-react-app &lt; 2.0</h3><p>package.json 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>:&#123;</span><br><span class="line">   <span class="string">"/api/**"</span>:&#123;</span><br><span class="line">      <span class="string">"target"</span>:<span class="string">"https://easymock.spiritling.pub/"</span>,</span><br><span class="line">      <span class="string">"changeOrigin"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-react-app-gt-2-0"><a href="#create-react-app-gt-2-0" class="headerlink" title="create-react-app &gt; 2.0"></a>create-react-app &gt; 2.0</h3><h4 id="package-json-中配置（不推荐）"><a href="#package-json-中配置（不推荐）" class="headerlink" title="package.json 中配置（不推荐）"></a>package.json 中配置（不推荐）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: <span class="string">"https://easymock.spiritling.pub/"</span>,</span><br></pre></td></tr></table></figure><h4 id="配置文件-src-setupProxy-js-（推荐）"><a href="#配置文件-src-setupProxy-js-（推荐）" class="headerlink" title="配置文件 /src/setupProxy.js （推荐）"></a>配置文件 <code>/src/setupProxy.js</code> （推荐）</h4><p>将 <code>create-react-app</code> 解包后，可以在 <code>config</code> 文件夹下找到配置</p><p>在 <code>config/path.js</code> 中存在 <code>proxySetup: resolveApp(&#39;src/setupProxy.js&#39;),</code></p><p>而 <code>proxySetup</code> 是只在 <code>webpackDevServer.config.js</code> 文件中使用，也就是说只在开发时使用</p><p>所以，可以在 /src/setupProxy.js 中配置</p><p>首先安装 <code>http-proxy-middleware</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware -D</span><br></pre></td></tr></table></figure><p>然后文件配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">        <span class="string">'/api/v1/'</span>,</span><br><span class="line">        proxy(&#123;</span><br><span class="line">            target : <span class="string">'https://easymock.spiritling.pub/'</span>,</span><br><span class="line">            changeOrigin : <span class="literal">true</span>,  <span class="comment">// 设置跨域请求</span></span><br><span class="line">            PathRewrite : &#123;</span><br><span class="line">                <span class="string">'^/api/v1'</span> : <span class="string">''</span> <span class="comment">// 将/api/v1 变为 ''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><h4 id="01"><a href="#01" class="headerlink" title="01"></a>01</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">        <span class="string">'/api/v1/'</span>,</span><br><span class="line">        proxy(&#123;</span><br><span class="line">            target : <span class="string">'https://easymock.spiritling.pub/'</span>,</span><br><span class="line">            changeOrigin : <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>游览器中请求为 <code>https://example.com/api/v1/login</code></p><p>则经过代理后可以转为 <code>https://easymock.spiritling.pub/api/v1/login</code></p><h4 id="02"><a href="#02" class="headerlink" title="02"></a>02</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">        <span class="string">'/api/v1/'</span>,</span><br><span class="line">        proxy(&#123;</span><br><span class="line">            target : <span class="string">'https://easymock.spiritling.pub/'</span>,</span><br><span class="line">            changeOrigin : <span class="literal">true</span>,</span><br><span class="line">            PathRewrite : &#123;</span><br><span class="line">                <span class="string">'^/api/v1'</span> : <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>游览器中请求为 <code>https://example.com/api/v1/login</code></p><p>则经过代理后可以转为 <code>https://easymock.spiritling.pub/login</code></p><blockquote><p><a href="https://create-react-app.dev/docs/proxying-api-requests-in-development/" rel="external nofollow noopener noreferrer" target="_blank">create-react-app官方-Proxying API Requests in Development</a></p></blockquote><h2 id="http-proxy-middleware-新版本-≧-1-0-0"><a href="#http-proxy-middleware-新版本-≧-1-0-0" class="headerlink" title="http-proxy-middleware 新版本 ≧ 1.0.0"></a><code>http-proxy-middleware</code> 新版本 ≧ 1.0.0</h2><p>在新版本大于等于 1.0.0 时使用会出现如下问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy is not a function</span><br></pre></td></tr></table></figure><p>也就是说 <code>http-proxy-middleware</code> 或者 <code>setupProxy</code> 会出现报错 <code>proxy is not a function</code></p><p>所以需要使用新版本的写法才可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(createProxyMiddleware(<span class="string">'/api/v1'</span>, &#123;</span><br><span class="line">        target : <span class="string">'https://easymock.spiritling.pub'</span>,</span><br><span class="line">        changeOrigin : <span class="literal">true</span>,</span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite : &#123;</span><br><span class="line">            <span class="string">'^/api/v1'</span> : <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;React 使用 Proxy 代理（create-react-app）&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="react" scheme="https://blog.spiritling.cn/categories/react/"/>
    
    
      <category term="react" scheme="https://blog.spiritling.cn/tags/react/"/>
    
      <category term="proxy" scheme="https://blog.spiritling.cn/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>IIS进行URL重写——实现https重定向，文件类型隐藏访问重写，nodejs等服务重写等等</title>
    <link href="https://blog.spiritling.cn/posts/82f57ccc/"/>
    <id>https://blog.spiritling.cn/posts/82f57ccc/</id>
    <published>2020-01-14T09:53:46.000Z</published>
    <updated>2020-01-20T09:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>IIS进行URL重写——实现https重定向，文件类型隐藏访问重写，nodejs等服务重写等等</p></blockquote><a id="more"></a><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><h3 id="什么是URL重写"><a href="#什么是URL重写" class="headerlink" title="什么是URL重写"></a>什么是URL重写</h3><p>URL重写就是首先获得一个进入的URL请求然后把它重新写成网站可以处理的另一个URL的过程。</p><p>举个例子来说，如果通过浏览器进来的URL是“UserProfile.aspx?ID=1”那么它可以被重写成 “UserProfile/1.aspx”，这样的URL，这样的网址可以更好的被网站所阅读。</p><p>根据不同的服务器就会有不同的URL重写规则，比如 iis apache nginx 这三种重写方式都是不同的，并非完全一样的。</p><p>今天只说 IIS 的重写</p><h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><p>首先有需求就有使用，所以，是我的需求诞生了我去使用重写功能</p><p>第一次接触的后端为 Nodejs，一个80或者443端口只能绑定一个程序。使用 windows 自带的iis服务器来使用，想要一个服务器上部署多个站点程序，则需要使用到反向代理才行。</p><p>不使用反向代理如下图所示：</p><p>比如我的网站是：<a href="https://demo.example.com:4436/posts/82f57ccc" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com:4436/posts/82f57ccc</a></p><img src="/posts/82f57ccc/20200119161522.png" title="URL重写之前NodeJS的URL"><p>明眼一看就是有点不够友好，正准备记下网址，这一瞅，直接放弃了，太麻烦了，还有端口</p><p>但是经过URL重写，也就是反向代理后就改为这样的：<a href="https://demo.example.com/4436/posts/82f57ccc" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com/4436/posts/82f57ccc</a> ，只需要记域名即可</p><img src="/posts/82f57ccc/20200119161557.png" title="URL重写之后"><p>只有你的服务器够大，一个通过一个服务代理无数个本地服务，哪怕本地无数个nodejs服务器从 10000-65535 监听，都可以的，只需要做好反向代理即可</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li>首先需要有个 IIS 服务器</li><li>然后去官网下载 <a href="https://www.iis.net/downloads/microsoft/web-platform-installer" rel="external nofollow noopener noreferrer" target="_blank">web平台安装工具</a></li><li>然后安装工具并打开</li></ol><img src="/posts/82f57ccc/1076304-20180412200431336-787173232.png" title="web平台安装工具"><ol start="4"><li>搜索 Application Request Routing 或者 应用程序请求路由 ，和 url 重写工具 或者 url rewrite；因为有可能是英文也有可能是中文，所以当一个搜索不到时，搜索另一个语言，一定要在产品全部中搜索</li></ol><img src="/posts/82f57ccc/1076304-20180412200848094-824241073.png" title="web平台安装工具"><ol start="5"><li><p>最近（2019底2020初）不知道 web平台安装工具出什么问题了，一直安装不了，有时候甚至会打不开，所以这里留个官网下载单模块的链接：<a href="https://www.iis.net/downloads/microsoft/url-rewrite" rel="external nofollow noopener noreferrer" target="_blank">url rewrite</a>，<a href="https://www.iis.net/downloads/microsoft/application-request-routing" rel="external nofollow noopener noreferrer" target="_blank">Application Request Routing</a>，<a href="https://www.iis.net/downloads" rel="external nofollow noopener noreferrer" target="_blank">All Modules Downloads</a>；拉到底下会有下载链接，url rewrite 有对应的中文版本。</p></li><li><p>下载安装即可</p></li></ol><h3 id="网盘链接"><a href="#网盘链接" class="headerlink" title="网盘链接"></a>网盘链接</h3><ol><li>百度网盘：</li></ol><ul><li>Application Request Routing：链接：<a href="https://pan.baidu.com/s/1Wg6u6IJVMqa-DeK5y8Ym6w" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1Wg6u6IJVMqa-DeK5y8Ym6w</a> 提取码：rcic</li><li>url rewrite：链接：<a href="https://pan.baidu.com/s/1ePW6HOkqqyHPqNNWyaQ43w" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1ePW6HOkqqyHPqNNWyaQ43w</a> 提取码：x27v</li></ul><ol start="2"><li>腾讯网盘：</li></ol><ul><li>Application Request Routing：链接：<a href="https://share.weiyun.com/5iI6q1W" rel="external nofollow noopener noreferrer" target="_blank">https://share.weiyun.com/5iI6q1W</a> 密码：u47bv6</li><li>url rewrite：链接：<a href="https://share.weiyun.com/52XIKfL" rel="external nofollow noopener noreferrer" target="_blank">https://share.weiyun.com/52XIKfL</a> 密码：57fkan</li></ul><h2 id="应用程序请求路由设置"><a href="#应用程序请求路由设置" class="headerlink" title="应用程序请求路由设置"></a>应用程序请求路由设置</h2><ol><li>打开IIS工具，选择上面安装的请求路由</li></ol><img src="/posts/82f57ccc/1076304-20180412201157869-978989213.png" title="应用程序请求路由设置"><ol start="2"><li>选择 Server Proxy Settings</li></ol><img src="/posts/82f57ccc/1076304-20180412201244421-675549952.png" title="应用程序请求路由设置"><ol start="3"><li>在中间区域，选择勾选Enable proxy，不用修改内容，当然也可以根据需求自己修改</li></ol><img src="/posts/82f57ccc/1076304-20180412201358722-1759010199.png" title="应用程序请求路由设置"><ol start="4"><li>点击应用即可，完成请求路由的设置</li></ol><img src="/posts/82f57ccc/1076304-20180412201437572-1668674268.png" title="应用程序请求路由设置"><h2 id="url重写设置：这里讲基本参数，后面才会是例子"><a href="#url重写设置：这里讲基本参数，后面才会是例子" class="headerlink" title="url重写设置：这里讲基本参数，后面才会是例子"></a>url重写设置：这里讲基本参数，后面才会是例子</h2><ol><li>打开站点，选择需要url重写的站点</li></ol><img src="/posts/82f57ccc/1076304-20180412201808214-1496956504.png" title="url重写设置"><ol start="2"><li>当安装完成url重写时，会出现url重写这个工具，选择工具，名字也有可能是英文</li></ol><img src="/posts/82f57ccc/1076304-20180412201916597-1448053593.png" title="url重写设置"><ol start="3"><li>打开工具，选在右侧栏第一行添加规则，打开对话框，选择空白规则</li></ol><img src="/posts/82f57ccc/1076304-20180412202043308-320482397.png" title="url重写设置"><ol start="4"><li>输入名称，随意，但是尽量能表示出重写目标的含义</li></ol><img src="/posts/82f57ccc/1076304-20180412203113345-943932106.png" title="url重写设置"><ol start="5"><li>匹配url，请求的url(字面意思)：与模式匹配（推荐），与模式不匹配；使用(匹配使用的方式)：正则表达式（推荐），通配符，完全匹配；</li></ol><img src="/posts/82f57ccc/1076304-20180412203336729-93686218.png" title="url重写设置"><ol start="6"><li>模式：比如说host代表主机域名，则在这里面写的就是host之后的正则匹配表达式，比如匹配在host/blog/，之下的都转到nodejs搭建的服务上，则这里填写^blog/(.*)；点击测试模式，我们填写下面图片内容进行测试，发现测试结果中有个{R:1}，我们需要将其导向至nodejs搭建的服务，也就是重写目标</li></ol><img src="/posts/82f57ccc/1076304-20180412203903048-2138965636.png" title="url重写设置"><ol start="7"><li><p>忽略大小写，自然就是字面意思</p></li><li><p>下面便是条件，按照图片来进行填写，这里不具体细数条件类型和规则模式填写，后面有三个例子进行了基本讲述，其余的请查看官方文档</p></li></ol><img src="/posts/82f57ccc/1076304-20180412204422154-761160361.png" title="url重写设置"><ol start="9"><li>服务器变量可以不写，操作类型可以因情况而定，一般使用 重定向或者重写（http强制跳转https一般为重定向，其余大多数为重写）</li></ol><p>重写URL：比如博客是在nodejs搭建的服务上，并且监听本地3001端口时，填写<a href="http://127.0.0.1:3001/{R:1}，这个{R:1}就是上面模式匹配的字符串，其实访问www.example.com/blog/index.html，就是相当于访问http://127.0.0.1:3001/index.html，这样监听本地3001，不用公网3001，可以减少服务器危险" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:3001/{R:1}，这个{R:1}就是上面模式匹配的字符串，其实访问www.example.com/blog/index.html，就是相当于访问http://127.0.0.1:3001/index.html，这样监听本地3001，不用公网3001，可以减少服务器危险</a></p><p>停止后续规则，自然就是字面意思，一旦勾选后，匹配处理结束，将不再处理下面的其他规则</p><img src="/posts/82f57ccc/1076304-20180412204907092-626474199.png" title="url重写设置"><ol start="10"><li>点击右侧栏应用即可，当应用显示灰色时，证明有必填项没有填写，所以无法应用，到这里也就重写完毕。</li></ol><h2 id="反向代理例子"><a href="#反向代理例子" class="headerlink" title="反向代理例子"></a>反向代理例子</h2><p>目前共有四个，分别是：</p><ul><li>http强制跳转https上（一般网站都会使用，全站https是趋势）</li><li>所有页面都返回同一个静态页（适合网站调整，整改，以及说明时）</li><li>隐藏其余端口访问，一个暴露的服务器后面隐藏多个监听本地的服务（代理多个内部服务）</li><li>隐藏访问的文件类型（*.php文件可以隐藏或更改文件后缀）</li></ul><h3 id="http强制跳转https上"><a href="#http强制跳转https上" class="headerlink" title="http强制跳转https上"></a>http强制跳转https上</h3><ol><li>重写规则名称，以及请求的正则匹配</li></ol><img src="/posts/82f57ccc/20200120135333.png" title="http强制跳转https"><ol start="2"><li>请求条件筛选</li></ol><img src="/posts/82f57ccc/20200120135842.png" title="http强制跳转https"><p>域名和https状态一定要核对清除，并且匹配要选择全部匹配</p><ol start="3"><li>请求匹配，条件过滤后就是要重定向的地址</li></ol><img src="/posts/82f57ccc/20200120140954.png" title="http强制跳转https"><p>其中 {R:1} 就是指原请求中的路径，比如：<a href="http://demo.example.com/blog/posts/dec13d34" rel="external nofollow noopener noreferrer" target="_blank">http://demo.example.com/blog/posts/dec13d34</a> 它的请求路径就是 blog/posts/dec13d34，所以在重定向的域名后需要添加 <code>/</code></p><p>然后就可以将 http 请求强制跳转到 https 上</p><p>在最后会附有 <code>web.config</code> 配置文件</p><h3 id="所有页面都返回同一个静态页"><a href="#所有页面都返回同一个静态页" class="headerlink" title="所有页面都返回同一个静态页"></a>所有页面都返回同一个静态页</h3><p>在上面我们将每个http请求都重定向到https上，相当于一个http对应一个https，通过 <code>{R:1}</code> 来动态赋值</p><p>但是如果深入一想，假设我们将 <code>{R:1}</code> 固定指向 <code>index.html</code>，那么每一个请求都会返回 <code>index.html</code> 内容，在将重定向改为重写，保持客户端url不变，但是内容已经被重写为 <code>index.html</code> 的内容了</p><p>重写域名可以使用 <code>http://localhost:port/</code> 或者 <code>http://127.0.0.1:port/</code></p><p>所以实现访问任何页面都返回同一个内容是很轻松的。</p><p>在最后会附有 <code>web.config</code> 配置文件</p><h3 id="隐藏其余端口访问，一个暴露的服务器后面隐藏多个监听本地的服务（代理多个内部服务）"><a href="#隐藏其余端口访问，一个暴露的服务器后面隐藏多个监听本地的服务（代理多个内部服务）" class="headerlink" title="隐藏其余端口访问，一个暴露的服务器后面隐藏多个监听本地的服务（代理多个内部服务）"></a>隐藏其余端口访问，一个暴露的服务器后面隐藏多个监听本地的服务（代理多个内部服务）</h3><p>在可以重写到指定的其他服务地址上去，那么同样也可以将本地监听非 80 443 端口的服务进行服务器层面的隐藏</p><p>比如原本访问 <a href="https://demo.example.com:4436/posts/82f57ccc" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com:4436/posts/82f57ccc</a> 内容，但是可以使用重写进行改变</p><p>重写请求模式，也就是正则匹配内容为：<code>^4436/(.*)</code></p><p>服务器条件，域名来源为：<code>^demo\.example\.com$</code></p><p>重写url可以为：<code>https://demo.example.com:4436/{R:1}</code></p><p>那么可以将明面上的请求 <a href="https://demo.example.com/4436/posts/82f57ccc" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com/4436/posts/82f57ccc</a> 进行url重写</p><p>先通过请求匹配 <code>^4436/(.*)</code> 获取到 <code>{R:1}</code> 为 <code>posts/82f57ccc</code></p><p>然后将 <code>{R:1}</code> 转发到 <code>https://demo.example.com:4436/</code> 上，就可以完成请求代理</p><h3 id="隐藏访问的文件类型（-php文件可以隐藏或更改文件后缀）"><a href="#隐藏访问的文件类型（-php文件可以隐藏或更改文件后缀）" class="headerlink" title="隐藏访问的文件类型（*.php文件可以隐藏或更改文件后缀）"></a>隐藏访问的文件类型（*.php文件可以隐藏或更改文件后缀）</h3><p>相应的，既然请求匹配可以匹配指定路径，那么也可以匹配指定文件，比如说：请求的为 <code>php</code> 文件</p><p>比如原本访问 <a href="https://demo.example.com/posts/82f57ca2phpf" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com/posts/82f57ca2phpf</a> 内容，但是可以使用重写进行改变</p><p>重写请求模式，也就是正则匹配内容为：<code>(.*)phpf$</code></p><p>服务器条件，域名来源为：<code>^demo\.example\.com$</code></p><p>重写url可以为：<code>https://demo.example.com/{R:1}.php</code></p><p>那么可以将明面上的请求 <a href="https://demo.example.com/posts/82f57ca2phpf" rel="external nofollow noopener noreferrer" target="_blank">https://demo.example.com/posts/82f57ca2phpf</a> 进行url重写</p><p>先通过请求匹配 <code>(.*)phpf$</code> 获取到 <code>{R:1}</code> 为 <code>posts/82f57ca2</code></p><p>然后将 <code>{R:1}</code> 转发到 <code>https://demo.example.com/{R:1}.php</code> 上，实际请求为：<code>https://demo.example.com/posts/82f57ca2.php</code></p><h2 id="web-config配置文件"><a href="#web-config配置文件" class="headerlink" title="web.config配置文件"></a><code>web.config</code>配置文件</h2><p><code>web.config</code> 配置文件放置在 iis 站点的根目录</p><p>可以根据自己需求进行更改</p><p>在线代码块：<a href="https://gist.github.com/SpiritLing/c0f12694158378594991a3084c433df3" rel="external nofollow noopener noreferrer" target="_blank">gist</a>，<a href="https://gitee.com/SpiritLing/codes/jyiepcqdkohrlm56b0axn35" rel="external nofollow noopener noreferrer" target="_blank">gitee</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- Origin Release：https://blog.spiritling.cn/posts/82f57ccc/ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- Origin Develop：https://dev.blog.spiritling.pub/posts/82f57ccc/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">clear</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- htpt =&gt; https --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"demo-https"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">stopProcessing</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"(.*)"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">"MatchAll"</span> <span class="attr">trackAllCaptures</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTPS&#125;"</span> <span class="attr">pattern</span>=<span class="string">"^OFF$"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTP_HOST&#125;"</span> <span class="attr">pattern</span>=<span class="string">"^demo\.example\.com$"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Redirect"</span> <span class="attr">url</span>=<span class="string">"https://demo.example.com/&#123;R:1&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- https domain/4436 =&gt; https domain:4436 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"demo"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">stopProcessing</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"^4436/(.*)"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">"MatchAll"</span> <span class="attr">trackAllCaptures</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTPS&#125;"</span> <span class="attr">pattern</span>=<span class="string">"^ON$"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTP_HOST&#125;"</span> <span class="attr">pattern</span>=<span class="string">"^demo\.example\.com$"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"https://demo.example.com:4436/&#123;R:1&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- domain =&gt; https://localhost --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">stopProcessing</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"(.*)"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTP_HOST&#125;"</span> <span class="attr">pattern</span>=<span class="string">"^test\.example\.com$"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"https://localhost"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caching</span> <span class="attr">enabled</span>=<span class="string">"false"</span> <span class="attr">enableKernelCache</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;IIS进行URL重写——实现https重定向，文件类型隐藏访问重写，nodejs等服务重写等等&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iis" scheme="https://blog.spiritling.cn/categories/iis/"/>
    
    
      <category term="iis" scheme="https://blog.spiritling.cn/tags/iis/"/>
    
      <category term="反向代理" scheme="https://blog.spiritling.cn/tags/reverse-proxy/"/>
    
      <category term="url重写" scheme="https://blog.spiritling.cn/tags/url-rewrite-zh/"/>
    
      <category term="url rewrite" scheme="https://blog.spiritling.cn/tags/url-rewrite/"/>
    
  </entry>
  
  <entry>
    <title>koa2 相关的记录</title>
    <link href="https://blog.spiritling.cn/posts/71d38ff0/"/>
    <id>https://blog.spiritling.cn/posts/71d38ff0/</id>
    <published>2020-01-03T08:23:28.000Z</published>
    <updated>2020-01-03T11:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>koa2 相关的记录 第一节</p></blockquote><a id="more"></a><h2 id="koa-如何优雅的手动中断请求"><a href="#koa-如何优雅的手动中断请求" class="headerlink" title="koa 如何优雅的手动中断请求"></a>koa 如何优雅的手动中断请求</h2><h3 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h3><p>在开发自己的blog系统时，后端采用了koa2来处理，在使用过程中可以算是比较完美和舒服了。</p><p>但是在我进行一个最初的登录api时出现了一个问题，以下是这个api处理逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">    <span class="comment">// 判断不过，直接结束后续操作，不想使用 if else 就是因为嫌看起来太麻烦了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> db.user.findOne(&#123;</span><br><span class="line">        where : &#123;</span><br><span class="line">            username</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="comment">// 用户不存在，则也直接结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果存在直接返回用户</span></span><br><span class="line">    ctx.body = user;</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    logger.error(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我无法提前结束本次的请求，不论使用 <code>return;</code> <code>return next()</code> … 等等</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在我进行官网查询时，发现可以使用 nodejs 原生的 <code>res.end()</code> 来结束</p><p>在官方文档中 <a href="https://github.com/koajs/koa/blob/master/docs/api/context.md#ctxres" rel="external nofollow noopener noreferrer" target="_blank">ctx.res 是 Nodejs 的 response</a>，但是问题是并不支持 <code>res.end()</code>，也就是 <code>ctx.res.end()</code> 函数。</p><hr><blockquote class="blockquote-center"><p>官方文档</p></blockquote><p>Node’s <code>response</code> object.</p><p>Bypassing Koa’s response handling is <strong>not supported</strong>. Avoid using the following node properties:</p><ul><li><code>res.statusCode</code></li><li><code>res.writeHead()</code></li><li><code>res.write()</code></li><li><code>res.end()</code></li></ul><hr><p>koa 不建议直接结束，于是我继续查找资料，发现了 <a href="https://github.com/koajs/koa/blob/master/docs/api/context.md#ctxthrowstatus-msg-properties" rel="external nofollow noopener noreferrer" target="_blank"><code>koa.throw</code></a> 这个函数，</p><hr><blockquote class="blockquote-center"><p>官方文档</p></blockquote><p>ctx.throw([status], [msg], [properties])<br>Helper method to throw an error with a <code>.status</code> property<br>defaulting to <code>500</code> that will allow Koa to respond appropriately.<br>The following combinations are allowed:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.throw(<span class="number">400</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</span><br><span class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>, &#123; <span class="attr">user</span>: user &#125;);</span><br></pre></td></tr></table></figure><p>For example <code>ctx.throw(400, &#39;name required&#39;)</code> is equivalent to:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'name required'</span>);</span><br><span class="line">err.status = <span class="number">400</span>;</span><br><span class="line">err.expose = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure><p>Note that these are user-level errors and are flagged with<br><code>err.expose</code> meaning the messages are appropriate for<br>client responses, which is typically not the case for<br>error messages since you do not want to leak failure<br>details.</p><p>You may optionally pass a <code>properties</code> object which is merged into the error as-is, useful for decorating machine-friendly errors which are reported to the requester upstream.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.throw(<span class="number">401</span>, <span class="string">'access_denied'</span>, &#123; <span class="attr">user</span>: user &#125;);</span><br></pre></td></tr></table></figure><p>Koa uses <a href="https://github.com/jshttp/http-errors" rel="external nofollow noopener noreferrer" target="_blank">http-errors</a> to create errors. <code>status</code> should only be passed as the first parameter.</p><hr><p>这个函数可以抛出错误，并<strong>结束本次请求</strong>，而 <code>ctx,throw</code> 其实就是一个错误类型，基于 js 最原始的 Error 类型，所以我们也可以使用 <code>throw new Error</code> 来手动抛出自定义错误。</p><p>并且通过 koa 中的 next 来，可以将错误拦截住，并进行进一步处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">next().catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123; </span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以，接下来开始尝试更改和定义</p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>首先实现自定义错误</p><p>将自定义错误类型继承到标准 Error 类下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomError</span>(<span class="params">code, data = null</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Error</span>.call(<span class="keyword">this</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">this</span>.code = code;</span><br><span class="line">    <span class="keyword">this</span>.body = data;</span><br><span class="line">    <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            code : <span class="keyword">this</span>.code,</span><br><span class="line">            body : <span class="keyword">this</span>.body,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// inherits https://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor</span></span><br><span class="line">util.inherits(CustomError, <span class="built_in">Error</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CustomError;</span><br></pre></td></tr></table></figure><p>可以使用 ES6 的类继承（<a href="http://es6.ruanyifeng.com/#docs/class-extends" rel="external nofollow noopener noreferrer" target="_blank">不懂的可以看阮一峰的es6教程</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (code, data = null) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.body = data;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            code : <span class="keyword">this</span>.code,</span><br><span class="line">            body : <span class="keyword">this</span>.body,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = CustomError;</span><br></pre></td></tr></table></figure><p>自定义错误函数，可以自己增删参数。</p><p>如果想方便使用，不用每次导入，可以在每次请求进入后在中间件中处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CustomError = <span class="built_in">require</span>(<span class="string">'../utils/customError'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.custom  = &#123;</span><br><span class="line">        error : CustomError,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在逻辑层可以这样使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">  <span class="comment">// 想结束本次请求，可以直接抛出即可</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ctx.custom.error(<span class="number">200</span>, &#123;<span class="attr">message</span> : <span class="string">'请输入用户名和密码'</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然请求都结束了，那么接下来得处理koa，因为koa一旦捕获错误后，会自动处理成 <code>4xx</code> 或者 <code>5xx</code> 状态码；</p><p>当你的网站出现很多的 <code>4xx</code> 和 <code>5xx</code>，对搜索引擎优化来说就会出现问题。</p><p>所以，那么接下来就我们自己处理 koa 的捕获。</p><p>使用 <code>next().catch()</code> 来捕获错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> next().catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        ctx.status = err.code;</span><br><span class="line">        ctx.body = err.body;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>捕获后，我们将 <code>err</code> 中的 <code>code</code> 赋值给 <code>ctx.status</code> ，改变 koa 的响应状态，同理，将 <code>err</code> 中的需要返回的数据赋值给 koa 的返回值</p><p>然后，我们就可以在前端收到一个200的结果。</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>这样就可以手动优雅的结束此次请求。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;koa2 相关的记录 第一节&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="https://blog.spiritling.cn/categories/NodeJS/"/>
    
      <category term="koa" scheme="https://blog.spiritling.cn/categories/koa/"/>
    
    
      <category term="koa" scheme="https://blog.spiritling.cn/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 文章图片添加水印，不用云处理</title>
    <link href="https://blog.spiritling.cn/posts/72dc68b0/"/>
    <id>https://blog.spiritling.cn/posts/72dc68b0/</id>
    <published>2019-12-20T08:16:02.000Z</published>
    <updated>2019-12-20T08:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>Hexo 文章图片添加水印，不用云处理，本地每次构建进行处理</p></blockquote><a id="more"></a><p>由于网上找到的都是借用第三方云处理添加水印，但是我不太想用，所以自己开发了一个插件</p><p><a href="https://github.com/SpiritLing/hexo-images-watermark" rel="external nofollow noopener noreferrer" target="_blank">Hexo 图片添加水印Github地址</a></p><p>目前插件可以直接在 <code>hexo</code> 官网上搜索到</p><p>下面内容都是在 <code>Github</code> 上复制过来的，我的正式版博客目前挂载在我的 <code>Github</code> 仓库 <code>blog</code></p><img src="/posts/72dc68b0/5917f3d3862c9.png" title="演示图片"><hr><p><a href="https://travis-ci.com/SpiritLing/hexo-images-watermark" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://travis-ci.com/SpiritLing/hexo-images-watermark.svg?branch=master" alt="Build Status"></a><a href="https://www.npmjs.com/package/hexo-images-watermark" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/npm/v/hexo-images-watermark?label=npm%20version" alt="npm version"></a><a href="https://www.npmjs.com/package/hexo-images-watermark" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/npm/dm/hexo-images-watermark?label=npm%20downloads" alt="npm package download"></a><a href="https://spdx.org/licenses/GPL-3.0-only.html" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/npm/l/hexo-images-watermark" alt="NPM License"></a></p><p>一款用于 Hexo 静态博客网站生成时对图片添加水印。</p><p>不对原图产生任何影响，在网站静态页构建过程中将原图读取，输出添加了水印的图片。</p><p>在构建的静态网站中不会存在原图，只存在水印图片。</p><blockquote><p>原始文章图片</p></blockquote><p><a href="https://github.com/SpiritLing/hexo-images-watermark/blob/master/static/origin_image.png" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://github.com/SpiritLing/hexo-images-watermark/blob/master/static/origin_image.png" alt="原图，如果图片不显示请前往Github查看"></a></p><blockquote><p>水印图片</p></blockquote><p><img src="./static/change_image.png" alt="水印图，如果图片不显示请前往Github查看"></p><blockquote><p><strong>一定要阅读最后的提示事项，包含现有版本的支持情况和即将添加的功能</strong></p></blockquote><p>使用 <code>npm</code> 安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-images-watermark --save</span><br></pre></td></tr></table></figure><p>在站点配置文件 <code>_config.yml</code> 中进行如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watermark:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">textEnable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">rotate:</span> <span class="number">-30</span></span><br><span class="line">    <span class="attr">gravity:</span> <span class="string">centre</span></span><br></pre></td></tr></table></figure><p>在 <code>hexo generate</code> 运行时会自动为你的 <code>_post</code> 目录下的图片添加水印，新的图片将会放到 <code>public</code> 目录中对应的位置。</p><h2 id="必备配置参数"><a href="#必备配置参数" class="headerlink" title="必备配置参数"></a>必备配置参数</h2><h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a><code>enable</code></h3><p><strong>默认值</strong>：无<br><strong>说明</strong>：<code>true</code> 将会执行图片添加水印，<code>false</code> 将会不执行添加</p><h3 id="textEnable"><a href="#textEnable" class="headerlink" title="textEnable"></a><code>textEnable</code></h3><p><strong>默认值</strong>：false<br><strong>说明</strong>：是否使用文本来添加水印（❌警告：目前不支持文本和图片同时添加水印）</p><h3 id="imageEnable"><a href="#imageEnable" class="headerlink" title="imageEnable"></a><code>imageEnable</code></h3><p><strong>默认值</strong>：false<br><strong>说明</strong>：是否使用图片来添加水印（❌警告：目前不支持文本和图片同时添加水印）</p><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><h3 id="text"><a href="#text" class="headerlink" title="text"></a><code>text</code></h3><p><strong>默认值</strong>：使用配置文件中的url，一旦url不存在直接显示作者名字（SpiritLing）<br><strong>说明</strong>：当你使用的文字过长时，一旦转为图片后大于待加水印的图片尺寸，则会出现错误。</p><h3 id="fontPath"><a href="#fontPath" class="headerlink" title="fontPath"></a><code>fontPath</code></h3><p><strong>默认值</strong>：undefined，使用 <code>text-to-svg</code> 自带字体<br><strong>说明</strong>：自己加载需要的字体，支持单个字体文件，不区分中英文；如果纯中文，请只加载中文字体，例：需要加载 <code>source/static/font/custom.ttf</code> 字体直接将其写入到配置文件中即可</p><h3 id="color"><a href="#color" class="headerlink" title="color"></a><code>color</code></h3><p><strong>默认值</strong>：rgb(169,169,167)<br><strong>说明</strong>：颜色可以使用 rgb,rgba,#xxxxxx以及red名字式的。⚠️只对text有效</p><h3 id="gravity"><a href="#gravity" class="headerlink" title="gravity"></a><code>gravity</code></h3><p><strong>默认值</strong>：southeast<br><strong>说明</strong>：设置水印位置处于什么方向，以 <code>上北下南左东右西</code> 来确定</p><p>参数可用值：</p><table><thead><tr><th>类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>centre</td><td>中央</td><td>图片正中间</td></tr><tr><td>north</td><td>北</td><td>上方中间</td></tr><tr><td>west</td><td>东</td><td>左边中间</td></tr><tr><td>south</td><td>南</td><td>下边中间</td></tr><tr><td>east</td><td>西</td><td>右边中间</td></tr><tr><td>northwest</td><td>东北</td><td>左上角</td></tr><tr><td>southwest</td><td>东南</td><td>左下角</td></tr><tr><td>southeast</td><td>西南</td><td>右下角</td></tr><tr><td>northeast</td><td>西北</td><td>右上角</td></tr></tbody></table><h3 id="fontSize"><a href="#fontSize" class="headerlink" title="fontSize"></a><code>fontSize</code></h3><p><strong>默认值</strong>：18<br><strong>说明</strong>：文本字体大小，⚠️只对text有效</p><h3 id="watermarkImage"><a href="#watermarkImage" class="headerlink" title="watermarkImage"></a><code>watermarkImage</code></h3><p><strong>默认值</strong>：watermark.png<br><strong>说明</strong>：水印图片，放置在source文件根路径的图片名称；⚠️大小不要超过任何一张文章中的图片，否则会出错，可以搭配缩放进行使用</p><h3 id="width"><a href="#width" class="headerlink" title="width"></a><code>width</code></h3><p><strong>默认值</strong>：50<br><strong>说明</strong>：对图片进行缩放。⚠️只对image有效</p><h3 id="height"><a href="#height" class="headerlink" title="height"></a><code>height</code></h3><p><strong>默认值</strong>：50<br><strong>说明</strong>：对图片进行缩放。⚠️只对image有效</p><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a><code>rotate</code></h3><p><strong>默认值</strong>：0<br><strong>说明</strong>：旋转角度，如<code>45</code>代表逆时针45度，<code>-45</code>代表顺时针45度</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a><code>background</code></h3><p><strong>默认值</strong>：transparent<br><strong>说明</strong>：配合text和rotate使用，指的是文字转成的图片一旦旋转会出现多余空白，设置这些地方的颜色，一般透明色即可</p><h2 id="使用注意事项⚠️⚠️⚠️"><a href="#使用注意事项⚠️⚠️⚠️" class="headerlink" title="使用注意事项⚠️⚠️⚠️"></a>使用注意事项⚠️⚠️⚠️</h2><ol><li>文字不要过长过大，水印图片不要过大（太大可以使用缩放，⚠️但是缩放是全局性的），否则都会出现错误，终止生成静态页面</li><li>暂不支持图片和文字共同添加</li><li>目前只支持 <code>*.jpg</code>,<code>*.jpeg</code>，<code>*.png</code> 两种格式图片，并且只支持<code>source/_posts</code>文件夹下的图片，也就是文章本地图片；同时也不支持远程图片</li><li>水印图片也不支持远程和非soucre根路径下的文件，也是只支持 <code>*.jpg</code>,<code>*.jpeg</code>，<code>*.png</code> 两种格式图片</li><li>不支持循环满图添加水印</li><li>请使用 <code>1.1.x</code> 以上版本， <code>1.0.x</code> 是进行Hexo api相关测试时使用的，版本杂乱无章，使用 <code>1.0.x</code> 版本出现任何问题，概不理会</li></ol><h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h2><ul><li><input checked disabled type="checkbox"> 文字水印<ul><li><input checked disabled type="checkbox"> 自定义文字，颜色，大小</li><li><input checked disabled type="checkbox"> 自定义字体 - 2019-12-24 Done</li><li><input disabled type="checkbox"> 支持循环添加</li><li><input disabled type="checkbox"> 超限处理</li></ul></li><li><input checked disabled type="checkbox"> 图片水印<ul><li><input checked disabled type="checkbox"> 自定义水印图片</li><li><input disabled type="checkbox"> 远程水印图片</li><li><input disabled type="checkbox"> 支持循环添加</li><li><input disabled type="checkbox"> 超限处理</li></ul></li><li><input checked disabled type="checkbox"> 位置<ul><li><input checked disabled type="checkbox"> 固定位置：九个方位</li><li><input disabled type="checkbox"> 自定义 top，left</li></ul></li><li><input checked disabled type="checkbox"> 旋转</li><li><input checked disabled type="checkbox"> 缩放（仅限图片）</li><li><input disabled type="checkbox"> 其他格式支持</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Hexo 文章图片添加水印，不用云处理，本地每次构建进行处理&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo 系列" scheme="https://blog.spiritling.cn/categories/hexo-series/"/>
    
    
      <category term="Hexo" scheme="https://blog.spiritling.cn/tags/Hexo/"/>
    
      <category term="images" scheme="https://blog.spiritling.cn/tags/images/"/>
    
      <category term="plugin" scheme="https://blog.spiritling.cn/tags/plugin/"/>
    
      <category term="watermark" scheme="https://blog.spiritling.cn/tags/watermark/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 静态博客网站自动化构建和部署（二）自动构建和部署</title>
    <link href="https://blog.spiritling.cn/posts/f35d4de6/"/>
    <id>https://blog.spiritling.cn/posts/f35d4de6/</id>
    <published>2019-12-18T06:01:33.000Z</published>
    <updated>2019-12-18T13:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>Hexo 静态博客网站自动化构建和部署（二）自动构建和部署</p></blockquote><a id="more"></a><p><a href="/posts/b90941ba/">Hexo 静态博客网站自动化构建和部署（一）Hexo 介绍</a><br><a href="/posts/f35d4de6/">Hexo 静态博客网站自动化构建和部署（二）自动构建和部署</a></p><p>想要自动化构建需要 <code>.travis.yml</code> 文件</p><p>想要保存版本，可以自动对其打标签，需要使用到 <code>source/scripts/auto-versioning.js</code> 文件来获取版本号</p><p>想自动构建Docker镜像，需要 <code>source/Dockerfile</code> 和 <code>source/config/nginx.conf</code> 文件来构建Docker镜像和nginx的配置</p><p>这四个主要文件代码片段都在以下地址：</p><ul><li><a href="https://gist.github.com/SpiritLing/306900cfe70f704343fefaef5bb26571" rel="external nofollow noopener noreferrer" target="_blank">gist 代码片段</a> 一般会被限制访问，原因你们懂得</li><li><a href="https://gitee.com/SpiritLing/codes/ydpsxq4ahn2jk1fimbwoc82" rel="external nofollow noopener noreferrer" target="_blank">gitee 代码片段</a> 国内代码托管平台码云的代码片段</li></ul><h2 id="Travis-网站自动化构建"><a href="#Travis-网站自动化构建" class="headerlink" title="Travis 网站自动化构建"></a>Travis 网站自动化构建</h2><p><a href="https://travis-ci.com/" rel="external nofollow noopener noreferrer" target="_blank">Travis</a> 网站是一个对开源项目免费提供自动化构建的网站。</p><p>travis 目前只支持 Github 开源项目，其他暂不支持，在 travis 上使用github登录，可以直接获取你自己的仓库</p><p>在仓库列表中，每个仓库后面有一个 <code>Trigger a build</code> 按钮，点击这个按钮即可对这个仓库进行自动化构建，当然前提是你的仓库根路径有 <code>.travis.yml</code> 文件。</p><h3 id="travis-yml-文件分析"><a href="#travis-yml-文件分析" class="headerlink" title=".travis.yml 文件分析"></a>.travis.yml 文件分析</h3><h4 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h4><p>对于 <code>.travis.yml</code> 文件具体更细的讲解可以之间看<a href="https://docs.travis-ci.com/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>，这里只说涉及到的一些问题</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>对于上面部分代码来说：<br>language: 就是说指定什么语言来出来，这里选择node_js，则会在构建的虚拟环境中使用nodejs环境。你可以直接使用 npm 和 node 命令。<br>services: 提供的服务，这里选择docker，因为我们需要将编译后的静态网站文件打包成镜像，有了这个就可以直接使用docker命令<br>node_js： 指定nodejs版本</p><h4 id="构建工作"><a href="#构建工作" class="headerlink" title="构建工作"></a>构建工作</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">xxx</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">"xxx"</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">branch</span> <span class="string">=</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>建立一个工作，它包含以下阶段，可以分成很多阶段。比如：install，build，deploy等等阶段<br>stage: 阶段<br>name: 你为这个阶段起的名字，可有可无<br>if: 是否指定那些的分支可以执行，.travis.yml 在不同分支使用同一个文件，所以进行各自分支走各自的构建阶段，共同阶段可以提出来，取消掉if，目前我的没有提出来，原因在于每个阶段和每个阶段几乎没有相互联系，导致我的需求下无法提取使用</p><p>每种语言都有自己的默认 install 脚本，nodejs为 <code>npm install</code> ，所以我们这里不执行install，有构建默认自己执行</p><p>install和script都是由travis提供的钩子，在script期间nodejs默认执行为<code>npm test</code>，但是我们这里写了新的脚本，所以相当于替换掉默认的执行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before_install：install 阶段之前执行</span><br><span class="line">before_script：script 阶段之前执行</span><br><span class="line">after_failure：script 阶段失败时执行</span><br><span class="line">after_success：script 阶段成功时执行</span><br><span class="line">before_deploy：deploy 步骤之前执行</span><br><span class="line">after_deploy：deploy 步骤之后执行</span><br><span class="line">after_script：script 阶段之后执行</span><br></pre></td></tr></table></figure><p>完整的生命周期为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. before_install</span><br><span class="line">2. install</span><br><span class="line">3. before_script</span><br><span class="line">4. script</span><br><span class="line">5. aftersuccess or afterfailure</span><br><span class="line">5. [OPTIONAL] before_deploy</span><br><span class="line">7. [OPTIONAL] deploy</span><br><span class="line">8. [OPTIONAL] after_deploy</span><br><span class="line">9. after_script</span><br></pre></td></tr></table></figure><h3 id="script-分析"><a href="#script-分析" class="headerlink" title="script 分析"></a>script 分析</h3><h4 id="版本号获取"><a href="#版本号获取" class="headerlink" title="版本号获取"></a>版本号获取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VERSION=$(node ./source/scripts/auto-versioning.js)</span><br></pre></td></tr></table></figure><p>熟悉shell的应该不陌生，这条命令就是将node运行js文件输出的内容赋值到临时变量 <code>VERSION</code> 上，实际查看这个脚本文件，其实就是获取package.json中version的值，所以你如果觉得这个阶段结束了，需要保存下，则在下阶段开始的第一次将version改为其他版本号，则就会生成新的tag，如果一直不修改，则会每次构建都会覆盖掉远程仓库的旧tag。</p><h4 id="自动打Tag"><a href="#自动打Tag" class="headerlink" title="自动打Tag"></a>自动打Tag</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a -f v$VERSION -m "Travis CI Auto Tag `date +"%Y-%m-%d %H:%M:%S"`"</span><br></pre></td></tr></table></figure><p>切记，标签一定要在添加静态文件，切换静态文件分支，push静态文件之前。命令意思是强制打一个新tag，无论是否存在，配置message信息。</p><h4 id="Tag-push-origin"><a href="#Tag-push-origin" class="headerlink" title="Tag push origin"></a>Tag push origin</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f https://$&#123;GITHUB_USERNAME&#125;:$&#123;GITHUB_PASSWD&#125;@github.com/SpiritLing/blog.git v$VERSION</span><br></pre></td></tr></table></figure><p>强制push tag 时，远程仓库用户名和密码分别为：<code>GITHUB_USERNAME</code> 和 <code>GITHUB_PASSWD</code> ，这个在travis仓库构建设置中可以设置变量，有个选项，默认为加密状态，意思在构建日志中不显示，达到隐藏你的敏感信息，保护账户安全。通过这个方法，你可以在此仓库构建，但是可以推送到任何一个网站一个仓库中去，只需要应用密码也就是token（每个网站叫法和获取都不相同）。</p><h4 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u $&#123;DOCKER_USERNAME&#125; --password $&#123;DOCKER_PASSWD&#125;</span><br><span class="line">docker build -t $&#123;DOCKER_RPO&#125;:latest .</span><br><span class="line">docker push $&#123;DOCKER_RPO&#125;</span><br></pre></td></tr></table></figure><p>目前我只在dev分支构建中直接使用Docker命令来进行，Master分支我是通过Docker网站连接到github上，一旦gh-pages分支改变，Docker官网会自动构建响应的镜像。</p><p>首先第一行是docker登录命令，一般保险起见，不支持直接使用docker网站密码，而是生成token来进行登录，所以我这里的 <code>DOCKER_PASSWD</code> 实际上是一个token值</p><p>第二行是构建镜像 -t 代表打的标签；<code>DOCKER_RPO</code> 代表标签名，一般为 <code>{Docker UserName}/{Docker Repository}</code> ，这样不用后续push时，再更改标签；latest代表这个镜像版本，一般Docker默认都为latest；<code>.</code> 代表构建当前目录</p><p>第三行是push镜像到Docker仓库中去，一般如果出现错误，请确认你的 <code>DOCKER_RPO</code> 是否等于 <code>{Docker UserName}/{Docker Repository}</code>，如果不是用户名加仓库名，将无法push上去。</p><p>其余脚本和上面类似，一般熟悉一点linux操作命令和git命令应该都没什么问题，具体参数可以查看官方文档，这里推荐一个<a href="https://man.linuxde.net/" rel="external nofollow noopener noreferrer" target="_blank">Linux命令查询网站</a></p><h2 id="Docker-构建镜像"><a href="#Docker-构建镜像" class="headerlink" title="Docker 构建镜像"></a>Docker 构建镜像</h2><p>关于<a href="https://www.kancloud.cn/spirit-ling/docker-study" rel="external nofollow noopener noreferrer" target="_blank">Docker学习</a></p><p>Docker知识可以查看上面的文档，也可以直接点击站点概览中的Docker导航</p><h3 id="Dockerfile-分析"><a href="#Dockerfile-分析" class="headerlink" title="Dockerfile 分析"></a>Dockerfile 分析</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./config/nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><p>以上为Dockerfile文件内容</p><ul><li>FROM: 通过什么镜像构建，这里直接选择nginx，毕竟要直接将静态文件当网站访问</li><li>COPY: 复制文件到什么地方去，这里首先将 <code>config/nginx.conf</code> 网站配置文件复制到 <code>Nginx</code> 服务配置目录，直接覆盖掉默认的配置文件 <code>default.conf</code></li><li>COPY: 第二个复制，将当前目录下的所有文件复制到 <code>Nginx</code> 静态网站目录下，当然静态网站目录也是可以在 <code>nginx.conf</code> 中配置的</li><li>EXPOSE 80 443: 对外放开的端口号，一般 <code>Nginx</code> 放通 80 和 443 端口</li><li>CMD [“nginx”, “-g”, “daemon off;”]: CMD运行命令，一个Dockerfile中只允许出现一次，代表运行 nginx 服务</li></ul><h3 id="Docker-部署镜像"><a href="#Docker-部署镜像" class="headerlink" title="Docker 部署镜像"></a>Docker 部署镜像</h3><p>构建完毕并且推送到Docker镜像仓库后，可以使用下面命令来启动一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dev-blog-pages镜像部署，不是开发版的博客网站</span></span><br><span class="line">docker run \</span><br><span class="line">-u root \</span><br><span class="line">--name=dev-blog-pages \</span><br><span class="line">-d \</span><br><span class="line">--restart=on-failure:10 \</span><br><span class="line">-p 80:80 \</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;Docker UserName&#125;/<span class="variable">$&#123;Docker Repository&#125;</span></span></span><br></pre></td></tr></table></figure><p>-p 80:80 代表开放的端口，第一个代表对外放开的端口，也就是公网访问端口，第二个80端口指的是你的容器端口，相当于给外层系统和你的容器建立了一个端口映射。</p><p>其他具体命令意思可以直接看我上面的Docker文档。</p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>单分支：</p><ol><li>首先本地master分支开发，撰写博客，当前version:0.0.3</li><li>提交代码到远程仓库</li><li>触发Travis自动构建</li><li>首先先强制push标签v0.0.3</li><li>通过复制，移动，删除，将public移到最外层，全部添加，push到gh-pages分支上</li><li>github自动将gh-pages生成新的静态网站，Docker通过gh-pages变化来构建新的镜像</li><li>本地撰写下一个阶段 版本改为0.0.4，可以多次提交，最终此阶段满意为止，换新版本号，继续即可</li></ol><p>只需要本地写好文章，push到仓库后，什么事情也不需要管，过个几分钟，你的博客网站将会出现新的版本。</p><p>多分支：</p><ul><li>master：发布版 域名：blog.example.com</li><li>dev：开发版 域名：dev.example.com</li></ul><ol><li>本地始终开发dev分支，撰写博客，当前版本0.0.3</li><li>提交代码到远程仓库</li><li>触发Travis自动构建</li><li>首先先强制push标签v0.0.3</li><li>通过复制，移动，删除，将public移到最外层，全部添加，push到dev-blog分支上(这里我使用的是国内coding构建静态网站，自定义域名为：<a href="https://dev.blog.spiritling.pub" rel="external nofollow noopener noreferrer" target="_blank">dev.blog.spiritling.pub</a>)</li><li>coding设置静态网站部署会自动将dev-blog生成新的静态网站</li><li>通过docker命令构建镜像并推送</li><li>这时候你想给博客网站添加个百度统计，然后修修改改，再次上传</li><li>继续前面的过程，一旦你觉得更改的差不多了，可以发布了</li><li>那么直接将dev合并至master分支，然后需要反向合并，因为我使用的是 <code>git merge -squash</code> 命令，所以需要反向一次，保证下次合并不会出现问题。</li><li>接下来的步骤就是自动构建自动发布。</li><li>开始新的时，将version改为新的，继续新一轮的使用</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Hexo 静态博客网站自动化构建和部署（二）自动构建和部署&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo 系列" scheme="https://blog.spiritling.cn/categories/hexo-series/"/>
    
      <category term="Hexo静态网站自动化构建和部署系列" scheme="https://blog.spiritling.cn/categories/hexo-automated-build-and-deployment/"/>
    
    
      <category term="Hexo" scheme="https://blog.spiritling.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://blog.spiritling.cn/tags/Next/"/>
    
      <category term="Auto CI" scheme="https://blog.spiritling.cn/tags/auto-ci/"/>
    
      <category term="Auto Deploy" scheme="https://blog.spiritling.cn/tags/auto-deploy/"/>
    
      <category term="Github" scheme="https://blog.spiritling.cn/tags/Github/"/>
    
      <category term="Pages" scheme="https://blog.spiritling.cn/tags/Pages/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 静态博客网站自动化构建和部署（一）Hexo 介绍</title>
    <link href="https://blog.spiritling.cn/posts/b90941ba/"/>
    <id>https://blog.spiritling.cn/posts/b90941ba/</id>
    <published>2019-12-18T02:17:39.000Z</published>
    <updated>2019-12-18T11:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>Hexo 静态博客网站自动化构建和部署（一）Hexo 介绍</p></blockquote><a id="more"></a><p><a href="/posts/b90941ba/">Hexo 静态博客网站自动化构建和部署（一）Hexo 介绍</a><br><a href="/posts/f35d4de6/">Hexo 静态博客网站自动化构建和部署（二）自动构建和部署</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>如果你只需要在一个分支开发，一个分支发布，则只需要本地写好后直接提交到远程仓库，然后等待几分钟后，直接看你的网站就会发现已经更新上去了。</p><p>如果你需要和我一样一个开发版一个发布版，那么在自动化构建中只需要多一个手动将 <code>dev</code> 合并至 <code>master</code> 的步骤操作，其余和单分支开发一样都是自动构建自动部署。</p><p>开发推荐使用 Github 来使用，因为接下来的自动化构建的网站一般对 Github 支持较好，还有就是国内国外都可以访问 Github，并且速度还算可以。</p><p>以下是我的博客相关网站，如果需要对源码加密，可以将 Maste源码 和 Master Pages 分支分别存放在私有仓库和公开仓库</p><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>Master 源码</td><td><a href="https://github.com/SpiritLing/blog" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/SpiritLing/blog</a></td></tr><tr><td>Dev 源码</td><td><a href="https://github.com/SpiritLing/blog/tree/dev" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/SpiritLing/blog/tree/dev</a></td></tr><tr><td>Master Pages</td><td><a href="https://github.com/SpiritLing/blog/tree/gh-pages" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/SpiritLing/blog/tree/gh-pages</a></td></tr><tr><td>Dev Pages</td><td><a href="https://spiritling.coding.net/p/dev/d/dev/git/tree/dev-blog" rel="external nofollow noopener noreferrer" target="_blank">https://spiritling.coding.net/p/dev/d/dev/git/tree/dev-blog</a></td></tr></tbody></table><h2 id="开始前的工作"><a href="#开始前的工作" class="headerlink" title="开始前的工作"></a>开始前的工作</h2><h3 id="环境和账号"><a href="#环境和账号" class="headerlink" title="环境和账号"></a>环境和账号</h3><p>首先需要准备环境</p><ul><li>Nodejs</li><li>一款编辑器-Vscode</li><li>Github 账号</li><li>Coding 账号（单分支可以不用，如果博客主要面对的是国内，可以使用这个来当静态网站站点）</li></ul><h3 id="本地开发安装"><a href="#本地开发安装" class="headerlink" title="本地开发安装"></a>本地开发安装</h3><p>首先全局安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>使用 Hexo 创建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init hexo-blog</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>之后大概目录如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="关联-Github-仓库"><a href="#关联-Github-仓库" class="headerlink" title="关联 Github 仓库"></a>关联 Github 仓库</h2><p>创建仓库时，不要选择初始化文件，如果选了，就需要将仓库克隆下来，在将 Hexo 生成的目录内的内容迁移过去</p><p>不选择初始化文件时，在仓库首页会有提示如何添加已有的本地仓库。</p><p>首先进入<code>hexo-blog</code>目录下<br>逐步运行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m "first commit"</span><br></pre></td></tr></table></figure><p>添加完已修改的文件后（切记不要把node_modules加入进去），一般情况下 hexo 创建的初始化项目都含有 <code>.gitignore</code> 文件，其中自动包含 <code>node_modules</code></p><p>接下来需要添加远程仓库地址，有两种协议，一种http一种git</p><p>使用http协议会弹出一个窗口，需要进行 GitHub 账号登录，以后使用 http 就不会再次弹出</p><p>使用git协议需要先在账户中添加本地私钥，才能够下载下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:&#123;Your Name&#125;/&#123;Your repository&#125;.git</span><br><span class="line">git remote add origin https://github.com/&#123;Your Name&#125;/&#123;Your repository&#125;.git</span><br></pre></td></tr></table></figure><p>接下来将其推送到远程仓库，并和远程仓库保持连接（-u）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>推送成功后，你的本地和远程就会构建起关联。</p><h2 id="Hexo-文件说明"><a href="#Hexo-文件说明" class="headerlink" title="Hexo 文件说明"></a>Hexo 文件说明</h2><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" rel="external nofollow noopener noreferrer" target="_blank">官方配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>做过nodejs项目和前端构建的工作的，应该对其不陌生</p><h3 id="scaffolds-文件夹"><a href="#scaffolds-文件夹" class="headerlink" title="scaffolds 文件夹"></a>scaffolds 文件夹</h3><p><a href="https://hexo.io/zh-cn/docs/writing" rel="external nofollow noopener noreferrer" target="_blank">官方模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source-文件夹"><a href="#source-文件夹" class="headerlink" title="source 文件夹"></a>source 文件夹</h3><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes" rel="external nofollow noopener noreferrer" target="_blank">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="生成静态网站和其他"><a href="#生成静态网站和其他" class="headerlink" title="生成静态网站和其他"></a>生成静态网站和其他</h2><p>使用Hexo内置的就可以生成静态网站，静态网站放置在 public 文件夹下，其他配置，比如 Next主题，google分析，百度通知，gitalk评论，版权声明等等，在此次不在进一步详细说明。</p><h2 id="自动化构建网站"><a href="#自动化构建网站" class="headerlink" title="自动化构建网站"></a>自动化构建网站</h2><h3 id="Travis-网站自动化构建"><a href="#Travis-网站自动化构建" class="headerlink" title="Travis 网站自动化构建"></a>Travis 网站自动化构建</h3><p><a href="https://travis-ci.com/" rel="external nofollow noopener noreferrer" target="_blank">Travis</a> 网站是一个对开源项目免费提供自动化构建的网站。</p><p>travis 目前只支持 Github 开源项目，其他暂不支持，在 travis 上使用github登录，可以直接获取你自己的仓库</p><p>在仓库列表中，每个仓库后面有一个 <code>Trigger a build</code> 按钮，点击这个按钮即可对这个仓库进行自动化构建，当然前提是你的仓库根路径有 <code>.travis.yml</code> 文件。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Hexo 静态博客网站自动化构建和部署（一）Hexo 介绍&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo 系列" scheme="https://blog.spiritling.cn/categories/hexo-series/"/>
    
      <category term="Hexo静态网站自动化构建和部署系列" scheme="https://blog.spiritling.cn/categories/hexo-automated-build-and-deployment/"/>
    
    
      <category term="Hexo" scheme="https://blog.spiritling.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="https://blog.spiritling.cn/tags/Next/"/>
    
      <category term="Auto CI" scheme="https://blog.spiritling.cn/tags/auto-ci/"/>
    
      <category term="Auto Deploy" scheme="https://blog.spiritling.cn/tags/auto-deploy/"/>
    
      <category term="Github" scheme="https://blog.spiritling.cn/tags/Github/"/>
    
      <category term="Pages" scheme="https://blog.spiritling.cn/tags/Pages/"/>
    
  </entry>
  
  <entry>
    <title>webpack 4.x 初级学习记录</title>
    <link href="https://blog.spiritling.cn/posts/26369b4c/"/>
    <id>https://blog.spiritling.cn/posts/26369b4c/</id>
    <published>2019-11-28T03:18:09.000Z</published>
    <updated>2019-11-28T12:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>webpack 4.x 初级学习记录</p></blockquote><a id="more"></a><h2 id="webpack-4-x-安装"><a href="#webpack-4-x-安装" class="headerlink" title="webpack 4.x 安装"></a>webpack 4.x 安装</h2><ol><li>首先需要在全局中安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g  // 与webpack 3.x 的区别</span><br></pre></td></tr></table></figure><ol start="2"><li>接下来打开新的文件夹，创建package.json</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>初始化 <code>package.json</code> 文件。</p><ol start="3"><li>局部安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save</span><br><span class="line">npm install webpack-cli --save</span><br></pre></td></tr></table></figure><h3 id="webpack-4-x-基本打包编译"><a href="#webpack-4-x-基本打包编译" class="headerlink" title="webpack 4.x 基本打包编译"></a>webpack 4.x 基本打包编译</h3><ol><li>webpack 3.x 编译</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack a.js b.js</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;extry file&#125;出填写入口文件的路径，本文中就是上述main.js的路径，</span></span><br><span class="line"><span class="comment"># &#123;destination for bundled file&#125;处填写打包文件的存放路径</span></span><br><span class="line"><span class="comment"># 填写路径的时候不用添加&#123;&#125;</span></span><br><span class="line">webpack &#123;entry file&#125; &#123;destination <span class="keyword">for</span> bundled file&#125;</span><br></pre></td></tr></table></figure><p>以上就是4版本之前的使用方式，但是这种方式在4版本中就不能使用了，4版本有自己的新的方式</p><ol start="2"><li>webpack 4.x 默认打包编译</li></ol><p>为什么上面要写默认打包编译，是因为webpack可以自定义打包编译配置，我们首先说下默认的打包编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry: &quot;/src/index.js&quot;  // 默认入口文件</span><br><span class="line">output: &quot;/dist/main.js&quot;  // 默认输入文件</span><br></pre></td></tr></table></figure><p>上面路径及文件中，<code>src</code> 和 <code>index.js</code> 需要我们手动去创建，在 <code>index.js</code> 中写好js代码即可，其余的 <code>dist</code> 和 <code>main.js</code> 都是由系统自动生成的，并且当你再一次编译时，会自动的在 <code>dist</code> 中覆盖同名文件。</p><p>而webpack 4.x 的编译命令也发生变化了，如下所示，分为开发环境和生产环境的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack --mode development</span><br><span class="line">webpack --mode production</span><br></pre></td></tr></table></figure><p>使用命令后，会自动生成文件。</p><p>配置 <code>package.json</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack --mode development"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 <code>npm ruin dev</code> 和 <code>npm run build</code> 进行执行命令</p><h2 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(static module bundler)。在 webpack 处理应用程序时，它会在内部创建一个依赖图(dependency graph)，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。</p></blockquote><p>从 webpack 4.0.0 版本开始，可以不用通过引入一个配置文件打包项目。然而，webpack 仍然还是 高度可配置的，并且能够很好的满足需求。</p><p>webpack 的核心概念：</p><ol><li>入口（entry）</li><li>输出（output）</li><li>loader</li><li>插件（plugins）</li></ol><p>我们需要在根目录下创建一个 <code>webpack.config.js</code> 的文件，使用 Commonjs 规范来进行书写。</p><h4 id="入口（entry）"><a href="#入口（entry）" class="headerlink" title="入口（entry）"></a>入口（entry）</h4><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p>可以通过在 webpack 配置中配置 <code>entry</code> 属性，来指定一个入口起点（或多个入口起点）。默认值为 <code>./src</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>entry</code> 属性的单个入口语法，是下面的简写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当你向 <code>entry</code> 传入一个数组时会发生什么？向 <code>entry</code> 属性传入「文件路径(file path)数组」将创建“多个主入口(multi-main entry)”。在你想要多个依赖文件一起注入，并且将它们的依赖导向(graph)到一个“chunk”时，传入数组的方式就很有用。</p></blockquote><p>多个入口文件处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据经验：每个 HTML 文档只使用一个入口起点。 当然也可以使用多个，但是推荐一个使用一个</p></blockquote><p><a href="https://www.webpackjs.com/concepts/entry-points/" rel="external nofollow noopener noreferrer" target="_blank">了解更多</a></p><h4 id="输出（output）"><a href="#输出（output）" class="headerlink" title="输出（output）"></a>输出（output）</h4><p><code>output</code> 属性告诉 <code>webpack</code> 在哪里输出它所创建的 <code>bundles</code>，以及如何命名这些文件，默认值为 <code>./dist</code>。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然上面的位置文件名都是可以改变的，可以自定义配置。</p><p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 <code>webpack bundle</code> 的名称，以及我们想要 bundle 生成(emit)到哪里</p><p><a href="https://www.webpackjs.com/concepts/output/" rel="external nofollow noopener noreferrer" target="_blank">了解更多</a></p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>‘<br>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><blockquote><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在更高层面，在 webpack 的配置中 loader 有两个目标：</p><ol><li><code>test</code> 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li><code>use</code> 属性，表示进行转换时，应该使用哪个 loader。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”</p></blockquote><p><a href="https://www.webpackjs.com/concepts/loaders/" rel="external nofollow noopener noreferrer" target="_blank">了解更多</a></p><h4 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h4><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建它的一个实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>webpack 提供许多开箱可用的插件！查阅<a href="https://www.webpackjs.com/plugins/" rel="external nofollow noopener noreferrer" target="_blank">插件列表</a>获取更多信息。</p><p>在 webpack 配置中使用插件是简单直接的，然而也有很多值得我们进一步探讨的用例。</p><p><a href="https://www.webpackjs.com/concepts/plugins/" rel="external nofollow noopener noreferrer" target="_blank">了解更多</a></p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>本地服务器</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -S</span><br></pre></td></tr></table></figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>可以构建一个本地服务器进行启动测试</p><h3 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"/dist"</span>),  <span class="comment">//启动路径</span></span><br><span class="line">    port: <span class="number">9001</span>,  <span class="comment">// 端口号</span></span><br><span class="line">    hot: <span class="literal">true</span>,  <span class="comment">// 热更新</span></span><br><span class="line">    inline:<span class="literal">true</span>  <span class="comment">// 内联模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在使用上面 <code>hot</code> 热更新时需要开启一个插件 <code>HotModuleReplacementPlugin</code> 此插件属于内置插件，可以直接使用 <code>new webpack.HotModuleReplacementPlugin()</code> 来进行启用</p><p>以上使 <code>webpack-dev-server</code> 的基本参数用法，具体的可以查看<a href="https://www.webpackjs.com/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">此处</a></p><h3 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>npm start</code> 开启启动命令</p><h2 id="webpack-loader处理"><a href="#webpack-loader处理" class="headerlink" title="webpack loader处理"></a>webpack loader处理</h2><p>loader ： 加载程序</p><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install css-loader style-loader -S</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>当新建文件 <code>*.css</code> 文件时进行css文件处理</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中需要注意的就是 <code>style-loader</code> 在 <code>css-loader</code> 之前。</p><p>当 css 有 <code>background-image: url(&#39;./1.jpg&#39;)</code> 有图片插入进来时，需要使用 <code>file-loader</code> 来进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.(jpg|png|jpeg)$/</span>,</span><br><span class="line">            use:[<span class="string">'file-loader'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置图片保存地方及是否使用base64进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.(jpg|png|jpeg)$/</span>,</span><br><span class="line">    use:<span class="string">'file-loader?limit=1024&amp;name=./images/[hash:8].[name].[ext]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML的img标记处理"><a href="#HTML的img标记处理" class="headerlink" title="HTML的img标记处理"></a>HTML的img标记处理</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-withimg-loader -S</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:/\.html$/,</span><br><span class="line">    use:["html-withimg-loader"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-打包分离"><a href="#CSS-打包分离" class="headerlink" title="CSS 打包分离"></a>CSS 打包分离</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install extract-text-webpack-plugin@next -S</span><br></pre></td></tr></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin=<span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件</span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(<span class="string">'./css/[name].css'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rules</span></span><br><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">    use:ExtractTextPlugin.extract(&#123;</span><br><span class="line">        fallback:<span class="string">"style-loader"</span>,</span><br><span class="line">        use:[&#123;</span><br><span class="line">            loader:<span class="string">"css-loader"</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">                <span class="comment">// 压缩</span></span><br><span class="line">                minimize:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 添加公共路径</span></span><br><span class="line">        publicPath:<span class="string">"../"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-插件"><a href="#webpack-插件" class="headerlink" title="webpack 插件"></a>webpack 插件</h2><p>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！</p><p>插件目的在于解决 loader 无法实现的其他事。</p><h3 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h3><p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p><p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginName = <span class="string">'ConsoleLogOnBuildWebpackPlugin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogOnBuildWebpackPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.run.tap(pluginName, compilation =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"webpack 构建过程开始！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中复用。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>由于插件可以携带参数/选项，你必须在 webpack 配置中，向 <code>plugins</code> 属性传入 <code>new</code> 实例。</p><p>根据你的 webpack 用法，这里有多种方式使用插件。</p><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//访问内置的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>当然上面的 <code>HtmlWebpackPlugin</code> 插件只使用了基本的功能，更多的参数可以去github上查看。</p><h2 id="webpack-babel"><a href="#webpack-babel" class="headerlink" title="webpack babel"></a>webpack babel</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>核心<br>babel-core</p><p>功能<br>babel-loader<br>babel-preset-env<br>babel-preset-react</p><h4 id="babel-loader-7-x-版本安装"><a href="#babel-loader-7-x-版本安装" class="headerlink" title="babel-loader 7.x 版本安装"></a>babel-loader 7.x 版本安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-core babel-loader@7 babel-preset-env babel-preset-react --save</span><br></pre></td></tr></table></figure><p>安装的 <code>babel-loader</code> 是7.x版本，8.x版本目前会出现报错，具体如何解决还没有了解清楚，所以安装 <code>babel-loader</code> 时需要写成这样的 <code>babel-loader@7</code></p><h4 id="babel-loader-8-x-版本安装"><a href="#babel-loader-8-x-版本安装" class="headerlink" title="babel-loader 8.x 版本安装"></a>babel-loader 8.x 版本安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -D babel-loader @babel/core @babel/preset-env @babel/preset-react -S</span><br></pre></td></tr></table></figure><p>上面为 <code>babel-loader 8.x</code> 版本安装，需要匹配下面的 8.x 配置</p><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><h4 id="babel-loader-7-x-版本配置"><a href="#babel-loader-7-x-版本配置" class="headerlink" title="babel-loader 7.x 版本配置"></a>babel-loader 7.x 版本配置</h4><p>第一种 全在 <code>webpack.config.js</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test:<span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">            loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">                presets:[<span class="string">'env'</span>,<span class="string">'react'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 排除node_modules 文件</span></span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>第二种 新建 <code>.babelrc</code> 文件 （推荐使用第二种）</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test:<span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">            loader:<span class="string">'babel-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 排除node_,modules 文件</span></span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>.baelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;env&quot;,</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-loader-8-x-版本配置"><a href="#babel-loader-8-x-版本配置" class="headerlink" title="babel-loader 8.x 版本配置"></a>babel-loader 8.x 版本配置</h4><p>第一种 全在 <code>webpack.config.js</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test:<span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">            loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">                presets:[<span class="string">'"@babel/preset-env'</span>,<span class="string">'"@babel/preset-react'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 排除node_modules 文件</span></span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>第二种 新建 <code>.babelrc</code> 文件 （推荐使用第二种）</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test:<span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">            loader:<span class="string">'babel-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 排除node_,modules 文件</span></span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>.baelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;&quot;@babel/preset-env&quot;,</span><br><span class="line">        &quot;&quot;@babel/preset-react&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-引入第三方库"><a href="#webpack-引入第三方库" class="headerlink" title="webpack 引入第三方库"></a>webpack 引入第三方库</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install jquery -S</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在webpack 3.x 中需要大量配置，但是在webpack中则少了很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"body"</span>).html(<span class="string">"&lt;p&gt;我是由JQuery写出来的&lt;/p&gt;"</span>)</span><br></pre></td></tr></table></figure><p>欢迎到 <a href="https://www.kancloud.cn/spirit-ling/blog" rel="external nofollow noopener noreferrer" target="_blank">看云阅读</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;webpack 4.x 初级学习记录&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Webpack" scheme="https://blog.spiritling.cn/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://blog.spiritling.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 创建对象和继承</title>
    <link href="https://blog.spiritling.cn/posts/5c3d9c03/"/>
    <id>https://blog.spiritling.cn/posts/5c3d9c03/</id>
    <published>2019-11-28T02:39:07.000Z</published>
    <updated>2019-11-28T10:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>JavaScript 创建对象和继承</p></blockquote><a id="more"></a><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>JS中可以有许多设计模式，在这些中推荐使用组合构造函数和原型模式；<br>因为不太善于写文章，所以下面简化文字叙述，直接看代码</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;</span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.age=age;</span><br><span class="line">    obj.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>正常情况下我们将函数名起为大写字母开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">29</span>);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">a.sayName();</span><br><span class="line">b.sayName();</span><br></pre></td></tr></table></figure><p>构造函数可以通过 <code>new</code> 关键字来进行处理，使其实例化，每个都有独有数据，也就是私有变量</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Li Si"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">21</span>;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">//"Li Si"</span></span><br><span class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">//"Li Si"</span></span><br></pre></td></tr></table></figure><p>原型模式所有的都共用同一个数据，相当于公有变量</p><h3 id="组合模式：构造函数和原型模式结合"><a href="#组合模式：构造函数和原型模式结合" class="headerlink" title="组合模式：构造函数和原型模式结合"></a>组合模式：构造函数和原型模式结合</h3><p>通过上面两个例子，两个都有独有的特性，所以我们可以组合两者了来进行处理，一般推荐使用组合模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person(<span class="string">"张三"</span>);</span><br><span class="line">person1.sayName(); <span class="comment">//"张三"</span></span><br><span class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person(<span class="string">"李四"</span>);</span><br><span class="line">person2.sayName(); <span class="comment">//"李四"</span></span><br></pre></td></tr></table></figure><p>这样各自经过实例化后，都有自己的独有数据，但是却有着公共方法；</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>ES5 继承有许多中方式，我们这里只说普通常用的继承方式</p><h3 id="原型链赋值继承"><a href="#原型链赋值继承" class="headerlink" title="原型链赋值继承"></a>原型链赋值继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">father.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">sub.prototype=<span class="keyword">new</span> father();</span><br><span class="line">sub.prototype.sayAge=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是典型的原型链赋值继承，但是这个继承是有缺点的，在继承时需要 <code>new</code> 关键字进行处理。</p><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=<span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">father.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  father.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> sub(<span class="string">"a"</span>)</span><br><span class="line">&gt; s</span><br><span class="line">&gt; sub &#123;<span class="attr">name</span>: <span class="string">"a"</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">    name: <span class="string">"a"</span></span><br><span class="line">    __proto__:</span><br><span class="line">    <span class="keyword">constructor</span>: ƒ sub()</span><br><span class="line">    __proto__: Object</span><br></pre></td></tr></table></figure><p>构造函数继承最后在输出中会发现并没有 父级的方法 ，但是可以将数据传到父级，与原型链继承互补，所以衍生出组合继承的方式</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">"Father"</span></span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Father.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承原型</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> Sub(<span class="string">"张三"</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>不仅会继承构造函数中的属性，也会复制父类原型链中的属性</p><p>但是在 <code>Sub.prototype = new Father();</code> 之后</p><p>Sub 的原型变成这样的了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Sub.prototype</span><br><span class="line">&gt; &#123;<span class="attr">name</span>: <span class="literal">undefined</span>, <span class="attr">className</span>: <span class="string">"person"</span>&#125;</span><br></pre></td></tr></table></figure><p>也就是说Sub的原型中已经有了一个name属性，而之后创建 s 时传给构造的函数的name则是通过this重新定义了一个name属性，相当于只是覆盖掉了原型的name属性（原型中的name依然还在），这样很不优雅。</p><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">"Father"</span></span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    Father.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意此处</span></span><br><span class="line">Sub.prototype=<span class="built_in">Object</span>.create(Father.prototype)</span><br><span class="line"></span><br><span class="line">Sub.prototype.sayAge=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了 <code>Object.creat(obj)</code> 方法，该方法会对传入的obj对象进行浅拷贝。和上面组合继承的主要区别就是：将父类的原型复制给了子类原型。这种做法很清晰：</p><ol><li>构造函数中继承父类属性／方法，并初始化父类。</li><li>子类原型和父类原型建立联系。</li></ol><p>还有一个问题，就是constructor属性，我们来看一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; Father.prototype.constructor</span><br><span class="line">&lt; Father(name)&#123;</span><br><span class="line">   <span class="keyword">this</span>.name=name;</span><br><span class="line">   <span class="keyword">this</span>.className=<span class="string">"Father"</span> </span><br><span class="line"> &#125;</span><br><span class="line">&gt; Sub.prototype.constructor</span><br><span class="line">&lt; Father(name)&#123;</span><br><span class="line">   <span class="keyword">this</span>.name=name; </span><br><span class="line">   <span class="keyword">this</span>.className=<span class="string">"Father"</span> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>constructor是类的构造函数，我们发现，Father和Sub实例的constructor指向都是Father，当然，这并不会改变instanceof的结果，但是对于需要用到construcor的场景，就会有问题。所以一般我们会加上这么一句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sub.prototype.constructor = Sub</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;JavaScript 创建对象和继承&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.spiritling.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.spiritling.cn/tags/JavaScript/"/>
    
      <category term="Object" scheme="https://blog.spiritling.cn/tags/Object/"/>
    
      <category term="Inheritance" scheme="https://blog.spiritling.cn/tags/Inheritance/"/>
    
  </entry>
  
  <entry>
    <title>Node-RSA 非对称加密使用</title>
    <link href="https://blog.spiritling.cn/posts/dd3fce82/"/>
    <id>https://blog.spiritling.cn/posts/dd3fce82/</id>
    <published>2019-10-16T04:26:23.000Z</published>
    <updated>2019-11-07T08:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>Node-RSA 非对称加密使用</p></blockquote><a id="more"></a><h2 id="关于非对称加密算法"><a href="#关于非对称加密算法" class="headerlink" title="关于非对称加密算法"></a>关于非对称加密算法</h2><p><a href="https://www.zhihu.com/question/33645891" rel="external nofollow noopener noreferrer" target="_blank">如何用通俗易懂的话来解释非对称加密?</a></p><h2 id="Node服务端使用非对称加密算法"><a href="#Node服务端使用非对称加密算法" class="headerlink" title="Node服务端使用非对称加密算法"></a>Node服务端使用非对称加密算法</h2><ol><li>首先引入 <code>node-rsa</code> 包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-rsa --save</span><br></pre></td></tr></table></figure><ol start="2"><li>生成私钥和公钥</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="keyword">new</span> NodeRSA(&#123; <span class="attr">b</span>: <span class="number">512</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> publicKey = key.exportKey(<span class="string">'public'</span>);</span><br><span class="line"><span class="keyword">const</span> privateKey = key.exportKey();</span><br></pre></td></tr></table></figure><ol start="3"><li>获取私钥和公钥</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publicKey = key.exportKey(<span class="string">'public'</span>);</span><br><span class="line"><span class="keyword">const</span> privateKey = key.exportKey(<span class="string">'private'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>公钥加密私钥解密 — 用于加解密</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> encryptPublic = key.encrypt(data, <span class="string">'base64'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> decryptPrivate = key.decrypt(encryptPublic, <span class="string">'json'</span>);</span><br></pre></td></tr></table></figure><ul><li><code>data</code> 就是需要加密的明文数据，可以是 <code>string</code>, <code>Buffer</code>，也可以是 <code>Array/Object</code>，<code>Array/Object</code> 首先会自动编码成 <code>json</code> 字符串</li><li><code>base64</code> 就是需要加密的结果以什么格式显示，这里选择以<code>base64</code>显示，默认为：buffer</li><li><code>utf8</code> 数据源是什么编码格式</li><li><code>json</code> 解密之后以什么格式出现，这里选择<code>json</code>格式</li></ul><ol start="5"><li>私钥加密公钥解密 — 用于签名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> encryptPrivate = key.encryptPrivate(data, <span class="string">'base64'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> decryptPublic = key.decryptPublic(encryptPrivate, <span class="string">'json'</span>);</span><br></pre></td></tr></table></figure><ul><li><code>data</code> 就是需要加密的明文数据，可以是 <code>string</code>, <code>Buffer</code>，也可以是 <code>Array/Object</code>，<code>Array/Object</code> 首先会自动编码成 <code>json</code> 字符串</li><li><code>base64</code> 就是需要加密的结果以什么格式显示，这里选择以<code>base64</code>显示，默认为：buffer</li><li><code>utf8</code> 数据源是什么编码格式</li><li><code>json</code> 解密之后以什么格式出现，这里选择<code>json</code>格式</li></ul><ol start="6"><li>返回结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.body = &#123; privateKey, publicKey, <span class="attr">publicData</span>: data, encryptPublic, decryptPrivate, encryptPrivate, decryptPublic &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果下面不存在代码块时，请检查网络是否可以访问 github 的 <a href="https://gist.github.com/" rel="external nofollow noopener noreferrer" target="_blank">gist</a> ，无法访问 gist 时，可以点击此处访问 <a href="https://gitee.com/SpiritLing/codes/drqb6zw90onvkghlmfxts73" rel="external nofollow noopener noreferrer" target="_blank">gitee</a> 的代码块</p></blockquote><script src="https://gist.github.com/SpiritLing/3503dc24df084d8d007d470973c4d721.js"></script><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Node-RSA 非对称加密使用&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="https://blog.spiritling.cn/categories/NodeJS/"/>
    
      <category term="RSA" scheme="https://blog.spiritling.cn/categories/RSA/"/>
    
    
      <category term="RSA" scheme="https://blog.spiritling.cn/tags/RSA/"/>
    
      <category term="NodeJS" scheme="https://blog.spiritling.cn/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 安装需要的软件环境</title>
    <link href="https://blog.spiritling.cn/posts/7bba76b6/"/>
    <id>https://blog.spiritling.cn/posts/7bba76b6/</id>
    <published>2019-08-02T11:06:23.000Z</published>
    <updated>2019-09-29T08:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --><blockquote class="blockquote-center"><p>Centos7 安装需要的软件环境（mysql, nodejs, nginx, jdk, Jenkins, Git）</p></blockquote><a id="more"></a><h2 id="Mysql-安装"><a href="#Mysql-安装" class="headerlink" title="Mysql 安装"></a>Mysql 安装</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol><li>下载并安装MySQL官方的 Yum Repository</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><ol start="2"><li>Yum 安装源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><ol start="3"><li>安装Mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><ol start="4"><li>设置开机 Mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure><p>5 启动 Mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><h3 id="Mysql-设置"><a href="#Mysql-设置" class="headerlink" title="Mysql 设置"></a>Mysql 设置</h3><ol><li>访问Mysql之前需要先查看默认密码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"password"</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><ol start="2"><li>登录Mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入刚才查到的密码，密码不可见隐藏显示。</p><ol start="3"><li>修改密码策略</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; show VARIABLES like <span class="string">"%password%"</span></span><br><span class="line">+---------------------------------------+---------+</span><br><span class="line">| Variable_name                         | Value   |</span><br><span class="line">|---------------------------------------+---------|</span><br><span class="line">| default_password_lifetime             | 0       |</span><br><span class="line">| disconnect_on_expired_password        | ON      |</span><br><span class="line">| log_builtin_as_identified_by_password | OFF     |</span><br><span class="line">| mysql_native_password_proxy_users     | OFF     |</span><br><span class="line">| old_passwords                         | 0       |</span><br><span class="line">| report_password                       |         |</span><br><span class="line">| sha256_password_proxy_users           | OFF     |</span><br><span class="line">| validate_password_dictionary_file     |         |</span><br><span class="line">| validate_password_length              | 8       |</span><br><span class="line">| validate_password_mixed_case_count    | 1       |</span><br><span class="line">| validate_password_number_count        | 1       |</span><br><span class="line">| validate_password_policy              | MEDIUM  |</span><br><span class="line">| validate_password_special_char_count  | 1       |</span><br><span class="line">+---------------------------------------+---------+</span><br></pre></td></tr></table></figure><p>介绍几个主要的的参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>validate_password_number_count</td><td>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</td></tr><tr><td>validate_password_special_char_count</td><td>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</td></tr><tr><td>validate_password_mixed_case_count</td><td>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</td></tr><tr><td>validate_password_length</td><td>参数是密码的长度，这个参数由下面的公式生成。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改密码长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改数字个数</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_number_count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改大小写字母个数</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_mixed_case_count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改特殊字符个数</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_special_char_count=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改密码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'Your New Pssword'</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>开启远程访问</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'You IP or ALL %'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'Your Password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>配置默认字符</li></ol><p>在 <code>my.cnf</code>（<code>/etc/my.cnf</code>） 或者 <code>my.ini</code> 文件中</p><p>在 <code>my.cnf</code> 配置中插入下面语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>一定要在 <code>[mysqld]</code> 之前插入这两句，否则就会出现下面报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql: [ERROR] unknown variable <span class="string">'datadir=/var/lib/mysql'</span></span><br></pre></td></tr></table></figure><p>主要原因就是<code>[client]</code>的配置信息，放在了<code>[mysqld]</code>配置信息的中间，导致其他<code>[mysqld]</code>的配置都归在<code>[client]</code>下。</p><p>在 <code>socket</code> 之后插入下面两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><ol start="7"><li>事务隔离（可选：<code>confluence 安装需要设置</code>）</li></ol><p><a href="https://www.cnblogs.com/shihaiming/p/11044740.html" rel="external nofollow noopener noreferrer" target="_blank">Mysql四种事务隔离</a></p><p>在 <code>my.cnf</code> 或者 <code>my.ini</code> 文件中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transaction_isolation = READ-COMMITTED</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">做完上面的可以重启下Mysql服务。</blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="使用-rpm-安装-JDK"><a href="#使用-rpm-安装-JDK" class="headerlink" title="使用 rpm 安装 JDK"></a>使用 <code>rpm</code> 安装 <code>JDK</code></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先通过<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载如下图标注的红色文件</p><img src="/posts/7bba76b6/20190802195857.png" title="jdk下载"><p>现在下载jdk需要登录oracle账户才可以下载</p><p>在此特别贡献一个账号密码，千万不要修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：oracle@spiritling.uu.me</span><br><span class="line">password：NkzKx!5fsx5Tj4@</span><br></pre></td></tr></table></figure><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>将下载的文件通过<a href="https://filezilla-project.org/" rel="external nofollow noopener noreferrer" target="_blank">FileZilla</a>软件上传到服务器</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用 <code>rpm</code> 命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u152-linux-x64.rpm</span><br></pre></td></tr></table></figure><img src="/posts/7bba76b6/20190802200348.png" title="jdk下载"><h2 id="Nginx-下载安装"><a href="#Nginx-下载安装" class="headerlink" title="Nginx 下载安装"></a>Nginx 下载安装</h2><h3 id="添加-yum-源"><a href="#添加-yum-源" class="headerlink" title="添加 yum 源"></a>添加 <code>yum</code> 源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装完 <code>yum</code> 源之后，可以使用下面命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>设置开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h2 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h2><h3 id="通过-yum-安装nodejs"><a href="#通过-yum-安装nodejs" class="headerlink" title="通过 yum 安装nodejs"></a>通过 <code>yum</code> 安装nodejs</h3><h4 id="更新-nodejs-各种版本-yum-源"><a href="#更新-nodejs-各种版本-yum-源" class="headerlink" title="更新 nodejs 各种版本 yum 源"></a>更新 nodejs 各种版本 <code>yum</code> 源</h4><ul><li>Nodejs v10.x 安装命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -</span><br></pre></td></tr></table></figure><ul><li>Nodejs v8.x 安装命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -</span><br></pre></td></tr></table></figure><p>其他版本如上所示</p><h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs -y</span><br></pre></td></tr></table></figure><h3 id="通过压缩包安装"><a href="#通过压缩包安装" class="headerlink" title="通过压缩包安装"></a>通过压缩包安装</h3><p>首先需要去官网下载对应的安装包</p><p>选择全部镜像 &gt; 阿里云镜像</p><p>找到 <code>node-v12.10.0-linux-x64.tar.gz</code> 形似这个文件名，具体版本号会发生变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v12.10.0/node-v12.10.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>下载完毕后解压到指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf node-v12.10.0-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><p>重命名文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">mv node-v12.10.0-linux-x64/ nodejs</span><br></pre></td></tr></table></figure><p>设置全局命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/nodejs/bin/node /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nodejs/bin/npm /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p>然后就可以愉快的使用了</p><h2 id="Jenkins-安装"><a href="#Jenkins-安装" class="headerlink" title="Jenkins 安装"></a>Jenkins 安装</h2><h3 id="官方安装"><a href="#官方安装" class="headerlink" title="官方安装"></a>官方安装</h3><p><a href="https://pkg.jenkins.io/redhat/" rel="external nofollow noopener noreferrer" target="_blank">官方链接RPM安装</a></p><p>在正式安装之前，需要先安装好 <code>java</code> 环境</p><p>安装源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br></pre></td></tr></table></figure><p>导入key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure><p>安装 <code>jenkins</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><p>修改端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>找到 <code>JENKINS_PORT=&quot;8080&quot;</code> 修改为 <code>JENKINS_PORT=&quot;你需要的端口&quot;</code></p><p>如果你需要在自动化构建中运行 <code>root</code> 权限的 shell ，那么还需要修改上面文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_USER=&quot;root&quot;</span><br></pre></td></tr></table></figure><p>进行重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins.service</span><br></pre></td></tr></table></figure><p>启动访问后，提示从 <code>/var/lib/jenkins/secrets/initialAdminPassword</code> 获取密码</p><p>登录后进行其他操作</p><p>当使用http访问时，插件按装时会出现一些失败，所以需要先进入以下链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST/pluginManager/advanced</span><br></pre></td></tr></table></figure><p>修改最底下的升级站点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://updates.jenkins.io/update-center.json</span><br></pre></td></tr></table></figure><p>也可以使用国内清华源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure><p>然后安装插件，添加管理员即可使用</p><h3 id="Docker-镜像安装"><a href="#Docker-镜像安装" class="headerlink" title="Docker 镜像安装"></a>Docker 镜像安装</h3><p>直接看<a href="https://jenkins.io/zh/doc/book/installing/#docker" rel="external nofollow noopener noreferrer" target="_blank">官网安装</a>，需要基本的Docker操作知识。</p><h2 id="Git-安装新版"><a href="#Git-安装新版" class="headerlink" title="Git 安装新版"></a>Git 安装新版</h2><h3 id="下载编辑工具"><a href="#下载编辑工具" class="headerlink" title="下载编辑工具"></a>下载编辑工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure><h3 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel</span><br></pre></td></tr></table></figure><h3 id="删除自带的git"><a href="#删除自带的git" class="headerlink" title="删除自带的git"></a>删除自带的git</h3><p>安装依赖时，yum自动安装了Git，需要卸载旧版本Git，命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="下载-git-最新版本的源代码"><a href="#下载-git-最新版本的源代码" class="headerlink" title="下载 git 最新版本的源代码"></a>下载 <code>git</code> 最新版本的源代码</h3><h4 id="去GitHub网站直接下载发布版"><a href="#去GitHub网站直接下载发布版" class="headerlink" title="去GitHub网站直接下载发布版"></a>去GitHub网站直接下载发布版</h4><p><a href="https://github.com/git/git/releases" rel="external nofollow noopener noreferrer" target="_blank">Github Release版本</a></p><p>当然在国内下载github的发布版可能会很慢，所以可以推荐去官网下载</p><h4 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h4><p><a href="https://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">git官网</a> 点击 <code>Downloads</code> ，进入下载页面</p><p>点击 <code>Linux/Unix</code> 下载 Linux 版本的git</p><p>拉到最下方，点击<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" rel="external nofollow noopener noreferrer" target="_blank">download a tarball</a> 调转到 git 压缩包压在页面，选择你需要的版本进行下载</p><h3 id="解压-git-压缩包"><a href="#解压-git-压缩包" class="headerlink" title="解压 git 压缩包"></a>解压 git 压缩包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf git-2.30.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="进入-git-目录，配置安装路径"><a href="#进入-git-目录，配置安装路径" class="headerlink" title="进入 git 目录，配置安装路径"></a>进入 git 目录，配置安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.13.3</span><br><span class="line"># make configure  只在源码安装情况下使用</span><br><span class="line">./configure --prefix=/usr/local/git</span><br></pre></td></tr></table></figure><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="配置全局路径"><a href="#配置全局路径" class="headerlink" title="配置全局路径"></a>配置全局路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/git/bin:$PATH&quot;</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="查看-git-版本"><a href="#查看-git-版本" class="headerlink" title="查看 git 版本"></a>查看 git 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="配置软连接"><a href="#配置软连接" class="headerlink" title="配置软连接"></a>配置软连接</h3><p>在有些系统或者软件中有可能会使用git默认地址，所以上面的配置也许有可能无法访问到git命令，所以需要添加软连接，添加到你所需要的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/git/bin/git /usr/bin/git</span><br></pre></td></tr></table></figure><p>前方是自己安装的位置，后面是需要软连接到需要的位置。</p><p>至于加不加 <code>-s</code> ，可以看这里 <a href="https://man.linuxde.net/ln" rel="external nofollow noopener noreferrer" target="_blank">Linux Ln 命令</a></p><blockquote class="blockquote-center"><p>只记录自己曾经使用过的方式，如果有其他更好的，欢迎留言!</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 11 2020 18:11:03 GMT+0800 (China Standard Time) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Centos7 安装需要的软件环境（mysql, nodejs, nginx, jdk, Jenkins, Git）&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux环境安装" scheme="https://blog.spiritling.cn/categories/linux-environment-install/"/>
    
    
      <category term="Centos" scheme="https://blog.spiritling.cn/tags/Centos/"/>
    
      <category term="Mysql" scheme="https://blog.spiritling.cn/tags/Mysql/"/>
    
      <category term="Nodejs" scheme="https://blog.spiritling.cn/tags/Nodejs/"/>
    
      <category term="Nginx" scheme="https://blog.spiritling.cn/tags/Nginx/"/>
    
      <category term="Java" scheme="https://blog.spiritling.cn/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://blog.spiritling.cn/tags/Jenkins/"/>
    
      <category term="Git" scheme="https://blog.spiritling.cn/tags/Git/"/>
    
  </entry>
  
</feed>
